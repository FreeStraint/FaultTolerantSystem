import java.util.Timer;

public class DataSorter {
	
	static PrimarySort psort;
	static String[] backupSort = {"InsertionSort"};
	//static String[] backupSort = {};

	
	public static void main(String[] args) throws Exception  {
		
		
		if(args.length != 5){
			String error = "Invalid syntax "
					+ "Input argument should be: input filename "
					+ "output filename "
					+ "failure probabilies for primary invariants "
					+ "failure probabilies for secondary invariants "
					+ "time limit";
			throw new SyntaxException(error);
		}
		
		//Main code
		int[] original;

		String inputFileName = args[0];
		String outputFileName = args[1];
		Double primaryProb = Double.parseDouble(args[2]);
		Double secondaryProb = Double.parseDouble(args[3]);
		int timeout = Integer.parseInt(args[4]);
		
		//Read the values generated by DataGenerator, and create a new copy. Thus we don't need to read file if primary fail
		original = ReadWriteFile.readFromFile(inputFileName);
		
		int[] inx = new int[original.length];
		System.arraycopy(original, 0, inx, 0, original.length);
		
		//Run on primary invariant
		psort = new PrimarySort();
		sort(psort, inx, timeout);
		
		//If acceptance test passed
		if(psort.isComplete() && !psort.isFailure(primaryProb)){
			if(SortCheck.check(original, psort.getValues())){
				ReadWriteFile.writeToFile(outputFileName, psort.getValues());
				System.out.println("Return result");
				System.exit(0);
			}
		}
		//Primary sorting failed, run backup test now
		for(String s:backupSort){
			BackupSort bs = new BackupSort(s);
			
			inx = new int[original.length];
			System.arraycopy(original, 0, inx, 0, original.length);
			
			sort(bs, inx, timeout);
			if(bs.isComplete() && !bs.isFailure(secondaryProb)){
				if(SortCheck.check(original, bs.getValues())){
					ReadWriteFile.writeToFile(outputFileName, bs.getValues());
					System.out.println("Return result");
					System.exit(0);
				}
			}
			
		}
		
		throw new Exception("Failure Exception, no sorting had been done");
		
	}
	
	public static void sort(Sorting s, int[] original, int timeout){
		//Reference from watchdog driver method from eclass
		Timer t = new Timer();
		Watchdog w = new Watchdog();
		
		s.setValues(original);
		t.schedule(w, timeout);
		s.start();
		try{
			s.join();
			t.cancel();
		} catch(InterruptedException e){
			System.out.println("You are dead");
		}
	}
	
	public int checkSum(int[] args){
		int sum = 0;
		for(int i:args){
			sum += i;
		}
		return sum;
	}
}
